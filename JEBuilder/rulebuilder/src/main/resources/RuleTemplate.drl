
template header

ruleName
salience
duration
persistence
condition
consequence
enabled
dateEffective
cronExpression
dateExpires

package io.je.runtime;

import java.time.LocalDateTime;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.lang.Long;

import utils.maths.*;

import io.je.utilities.log.JELogger;
import io.je.utilities.execution.Executioner;
import io.je.utilities.beans.JEEvent;
import io.je.utilities.beans.JEVariable;
import io.je.utilities.beans.JEMessage;
import io.je.utilities.beans.JEBlockMessage;
import io.je.ruleengine.drools.Persistence;
import io.je.ruleengine.drools.PersistenceMap;
import io.je.ruleengine.utils.JEMathUtils;
import io.je.project.variables.VariableManager;

import ${customImport};


template "JobEngineRuleTemplate"


rule "@{ruleName}"  @Propagation(IMMEDIATE)
dialect "mvel"
salience @{salience}
enabled @{enabled}
date-effective @{dateEffective}
date-expires @{dateExpires}
timer (cron:@{cronExpression})

when

    @{condition}

then

    if (PersistenceMap.getRulesPersistenceMap().get("@{ruleName}") == null) {

        PersistenceMap.getRulesPersistenceMap().put("@{ruleName}", new Persistence());

    }

    Persistence rulePersistence = PersistenceMap.getRulesPersistenceMap().get("@{ruleName}");

    if (rulePersistence.getDuration() == null) {

        rulePersistence.setStartTimestamp( Instant.now().toEpochMilli() );

    }

    rulePersistence.setDuration( Instant.now().toEpochMilli() - rulePersistence.getStartTimestamp() );

    if (rulePersistence.getDuration() >= @{persistence}) {

        rulePersistence.setDuration( null );
        rulePersistence.setStartTimestamp( null );

        @{consequence}

    }

end


end template